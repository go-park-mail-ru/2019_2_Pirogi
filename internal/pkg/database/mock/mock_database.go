// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	models "github.com/go-park-mail-ru/2019_2_Pirogi/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Upsert mocks base method
func (m *MockDatabase) Upsert(in interface{}) *models.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", in)
	ret0, _ := ret[0].(*models.Error)
	return ret0
}

// Upsert indicates an expected call of Upsert
func (mr *MockDatabaseMockRecorder) Upsert(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDatabase)(nil).Upsert), in)
}

// Get mocks base method
func (m *MockDatabase) Get(id models.ID, target string) (interface{}, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id, target)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockDatabaseMockRecorder) Get(id, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDatabase)(nil).Get), id, target)
}

// Delete mocks base method
func (m *MockDatabase) Delete(in interface{}) *models.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", in)
	ret0, _ := ret[0].(*models.Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDatabaseMockRecorder) Delete(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabase)(nil).Delete), in)
}

// ClearDB mocks base method
func (m *MockDatabase) ClearDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearDB")
}

// ClearDB indicates an expected call of ClearDB
func (mr *MockDatabaseMockRecorder) ClearDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDB", reflect.TypeOf((*MockDatabase)(nil).ClearDB))
}

// CheckCookie mocks base method
func (m *MockDatabase) CheckCookie(cookie *http.Cookie) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCookie", cookie)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckCookie indicates an expected call of CheckCookie
func (mr *MockDatabaseMockRecorder) CheckCookie(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCookie", reflect.TypeOf((*MockDatabase)(nil).CheckCookie), cookie)
}

// FindUserByEmail mocks base method
func (m *MockDatabase) FindUserByEmail(email string) (models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail
func (mr *MockDatabaseMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockDatabase)(nil).FindUserByEmail), email)
}

// FindUserByID mocks base method
func (m *MockDatabase) FindUserByID(id models.ID) (models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID
func (mr *MockDatabaseMockRecorder) FindUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockDatabase)(nil).FindUserByID), id)
}

// FindUserByCookie mocks base method
func (m *MockDatabase) FindUserByCookie(cookie *http.Cookie) (models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByCookie", cookie)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindUserByCookie indicates an expected call of FindUserByCookie
func (mr *MockDatabaseMockRecorder) FindUserByCookie(cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByCookie", reflect.TypeOf((*MockDatabase)(nil).FindUserByCookie), cookie)
}

// FindUsersByIDs mocks base method
func (m *MockDatabase) FindUsersByIDs(ids []models.ID) ([]models.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersByIDs", ids)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindUsersByIDs indicates an expected call of FindUsersByIDs
func (mr *MockDatabaseMockRecorder) FindUsersByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersByIDs", reflect.TypeOf((*MockDatabase)(nil).FindUsersByIDs), ids)
}

// FindFilmByTitle mocks base method
func (m *MockDatabase) FindFilmByTitle(title string) (models.Film, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilmByTitle", title)
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindFilmByTitle indicates an expected call of FindFilmByTitle
func (mr *MockDatabaseMockRecorder) FindFilmByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmByTitle", reflect.TypeOf((*MockDatabase)(nil).FindFilmByTitle), title)
}

// FindFilmByID mocks base method
func (m *MockDatabase) FindFilmByID(id models.ID) (models.Film, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilmByID", id)
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindFilmByID indicates an expected call of FindFilmByID
func (mr *MockDatabaseMockRecorder) FindFilmByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmByID", reflect.TypeOf((*MockDatabase)(nil).FindFilmByID), id)
}

// FindFilmsByIDs mocks base method
func (m *MockDatabase) FindFilmsByIDs(ids []models.ID) ([]models.Film, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilmsByIDs", ids)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindFilmsByIDs indicates an expected call of FindFilmsByIDs
func (mr *MockDatabaseMockRecorder) FindFilmsByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmsByIDs", reflect.TypeOf((*MockDatabase)(nil).FindFilmsByIDs), ids)
}

// FindPersonByNameAndBirthday mocks base method
func (m *MockDatabase) FindPersonByNameAndBirthday(name, birthday string) (models.Person, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPersonByNameAndBirthday", name, birthday)
	ret0, _ := ret[0].(models.Person)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindPersonByNameAndBirthday indicates an expected call of FindPersonByNameAndBirthday
func (mr *MockDatabaseMockRecorder) FindPersonByNameAndBirthday(name, birthday interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPersonByNameAndBirthday", reflect.TypeOf((*MockDatabase)(nil).FindPersonByNameAndBirthday), name, birthday)
}

// FindPersonByID mocks base method
func (m *MockDatabase) FindPersonByID(id models.ID) (models.Person, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPersonByID", id)
	ret0, _ := ret[0].(models.Person)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindPersonByID indicates an expected call of FindPersonByID
func (mr *MockDatabaseMockRecorder) FindPersonByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPersonByID", reflect.TypeOf((*MockDatabase)(nil).FindPersonByID), id)
}

// FindPersonsByIDs mocks base method
func (m *MockDatabase) FindPersonsByIDs(ids []models.ID) ([]models.Person, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPersonsByIDs", ids)
	ret0, _ := ret[0].([]models.Person)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindPersonsByIDs indicates an expected call of FindPersonsByIDs
func (mr *MockDatabaseMockRecorder) FindPersonsByIDs(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPersonsByIDs", reflect.TypeOf((*MockDatabase)(nil).FindPersonsByIDs), ids)
}

// FindReviewByID mocks base method
func (m *MockDatabase) FindReviewByID(id models.ID) (models.Review, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReviewByID", id)
	ret0, _ := ret[0].(models.Review)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindReviewByID indicates an expected call of FindReviewByID
func (mr *MockDatabaseMockRecorder) FindReviewByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReviewByID", reflect.TypeOf((*MockDatabase)(nil).FindReviewByID), id)
}

// GetFilmsSortedByMark mocks base method
func (m *MockDatabase) GetFilmsSortedByMark(limit, offset int) ([]models.Film, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsSortedByMark", limit, offset)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// GetFilmsSortedByMark indicates an expected call of GetFilmsSortedByMark
func (mr *MockDatabaseMockRecorder) GetFilmsSortedByMark(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsSortedByMark", reflect.TypeOf((*MockDatabase)(nil).GetFilmsSortedByMark), limit, offset)
}

// GetFilmsOfGenreSortedByMark mocks base method
func (m *MockDatabase) GetFilmsOfGenreSortedByMark(genre models.Genre, limit, offset int) ([]models.Film, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsOfGenreSortedByMark", genre, limit, offset)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// GetFilmsOfGenreSortedByMark indicates an expected call of GetFilmsOfGenreSortedByMark
func (mr *MockDatabaseMockRecorder) GetFilmsOfGenreSortedByMark(genre, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsOfGenreSortedByMark", reflect.TypeOf((*MockDatabase)(nil).GetFilmsOfGenreSortedByMark), genre, limit, offset)
}

// GetFilmsOfYearSortedByMark mocks base method
func (m *MockDatabase) GetFilmsOfYearSortedByMark(year string, limit, offset int) ([]models.Film, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmsOfYearSortedByMark", year, limit, offset)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// GetFilmsOfYearSortedByMark indicates an expected call of GetFilmsOfYearSortedByMark
func (mr *MockDatabaseMockRecorder) GetFilmsOfYearSortedByMark(year, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmsOfYearSortedByMark", reflect.TypeOf((*MockDatabase)(nil).GetFilmsOfYearSortedByMark), year, limit, offset)
}

// GetReviewsSortedByDate mocks base method
func (m *MockDatabase) GetReviewsSortedByDate(limit, offset int) ([]models.Review, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsSortedByDate", limit, offset)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// GetReviewsSortedByDate indicates an expected call of GetReviewsSortedByDate
func (mr *MockDatabaseMockRecorder) GetReviewsSortedByDate(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsSortedByDate", reflect.TypeOf((*MockDatabase)(nil).GetReviewsSortedByDate), limit, offset)
}

// GetReviewsOfFilmSortedByDate mocks base method
func (m *MockDatabase) GetReviewsOfFilmSortedByDate(filmID models.ID, limit, offset int) ([]models.Review, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsOfFilmSortedByDate", filmID, limit, offset)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// GetReviewsOfFilmSortedByDate indicates an expected call of GetReviewsOfFilmSortedByDate
func (mr *MockDatabaseMockRecorder) GetReviewsOfFilmSortedByDate(filmID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsOfFilmSortedByDate", reflect.TypeOf((*MockDatabase)(nil).GetReviewsOfFilmSortedByDate), filmID, limit, offset)
}

// GetReviewsOfAuthorSortedByDate mocks base method
func (m *MockDatabase) GetReviewsOfAuthorSortedByDate(authorID models.ID, limit, offset int) ([]models.Review, *models.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsOfAuthorSortedByDate", authorID, limit, offset)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(*models.Error)
	return ret0, ret1
}

// GetReviewsOfAuthorSortedByDate indicates an expected call of GetReviewsOfAuthorSortedByDate
func (mr *MockDatabaseMockRecorder) GetReviewsOfAuthorSortedByDate(authorID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsOfAuthorSortedByDate", reflect.TypeOf((*MockDatabase)(nil).GetReviewsOfAuthorSortedByDate), authorID, limit, offset)
}
