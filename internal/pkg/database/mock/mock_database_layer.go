// Code generated by MockGen. DO NOT EDIT.
// Source: database_layer.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	models "github.com/go-park-mail-ru/2019_2_Pirogi/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDatabaseLayer is a mock of DatabaseLayer interface
type MockDatabaseLayer struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseLayerMockRecorder
}

// MockDatabaseLayerMockRecorder is the mock recorder for MockDatabaseLayer
type MockDatabaseLayerMockRecorder struct {
	mock *MockDatabaseLayer
}

// NewMockDatabaseLayer creates a new mock instance
func NewMockDatabaseLayer(ctrl *gomock.Controller) *MockDatabaseLayer {
	mock := &MockDatabaseLayer{ctrl: ctrl}
	mock.recorder = &MockDatabaseLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseLayer) EXPECT() *MockDatabaseLayerMockRecorder {
	return m.recorder
}

// FindOneAndUpdateAndDecode mocks base method
func (m *MockDatabaseLayer) FindOneAndUpdateAndDecode(collectionName string, filter, update, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneAndUpdateAndDecode", collectionName, filter, update, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneAndUpdateAndDecode indicates an expected call of FindOneAndUpdateAndDecode
func (mr *MockDatabaseLayerMockRecorder) FindOneAndUpdateAndDecode(collectionName, filter, update, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndUpdateAndDecode", reflect.TypeOf((*MockDatabaseLayer)(nil).FindOneAndUpdateAndDecode), collectionName, filter, update, v)
}

// InsertMany mocks base method
func (m *MockDatabaseLayer) InsertMany(collectionName string, documents []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", collectionName, documents)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany
func (mr *MockDatabaseLayerMockRecorder) InsertMany(collectionName, documents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockDatabaseLayer)(nil).InsertMany), collectionName, documents)
}

// DeleteOne mocks base method
func (m *MockDatabaseLayer) DeleteOne(collectionName string, filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", collectionName, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne
func (mr *MockDatabaseLayerMockRecorder) DeleteOne(collectionName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockDatabaseLayer)(nil).DeleteOne), collectionName, filter)
}

// DeleteMany mocks base method
func (m *MockDatabaseLayer) DeleteMany(collectionName string, filter interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteMany", collectionName, filter)
}

// DeleteMany indicates an expected call of DeleteMany
func (mr *MockDatabaseLayerMockRecorder) DeleteMany(collectionName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockDatabaseLayer)(nil).DeleteMany), collectionName, filter)
}

// FindOneAndDecode mocks base method
func (m *MockDatabaseLayer) FindOneAndDecode(collectionName string, filter, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneAndDecode", collectionName, filter, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneAndDecode indicates an expected call of FindOneAndDecode
func (mr *MockDatabaseLayerMockRecorder) FindOneAndDecode(collectionName, filter, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndDecode", reflect.TypeOf((*MockDatabaseLayer)(nil).FindOneAndDecode), collectionName, filter, v)
}

// InsertOne mocks base method
func (m *MockDatabaseLayer) InsertOne(collectionName string, document interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", collectionName, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne
func (mr *MockDatabaseLayerMockRecorder) InsertOne(collectionName, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockDatabaseLayer)(nil).InsertOne), collectionName, document)
}

// UpdateOne mocks base method
func (m *MockDatabaseLayer) UpdateOne(collectionName string, filter, update interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", collectionName, filter, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockDatabaseLayerMockRecorder) UpdateOne(collectionName, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockDatabaseLayer)(nil).UpdateOne), collectionName, filter, update)
}

// AggregateFilms mocks base method
func (m *MockDatabaseLayer) AggregateFilms(collectionName string, pipeline interface{}) ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateFilms", collectionName, pipeline)
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateFilms indicates an expected call of AggregateFilms
func (mr *MockDatabaseLayerMockRecorder) AggregateFilms(collectionName, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateFilms", reflect.TypeOf((*MockDatabaseLayer)(nil).AggregateFilms), collectionName, pipeline)
}

// AggregateReviews mocks base method
func (m *MockDatabaseLayer) AggregateReviews(collectionName string, pipeline interface{}) ([]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateReviews", collectionName, pipeline)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateReviews indicates an expected call of AggregateReviews
func (mr *MockDatabaseLayerMockRecorder) AggregateReviews(collectionName, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateReviews", reflect.TypeOf((*MockDatabaseLayer)(nil).AggregateReviews), collectionName, pipeline)
}
