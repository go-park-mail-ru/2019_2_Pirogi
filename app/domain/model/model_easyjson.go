// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	http "net/http"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel(in *jlexer.Lexer, out *UserTrunc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "username":
			out.Username = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "image":
			out.Image = Image(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel(out *jwriter.Writer, in UserTrunc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserTrunc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserTrunc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserTrunc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserTrunc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel1(in *jlexer.Lexer, out *UserNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel1(out *jwriter.Writer, in UserNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel1(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel2(in *jlexer.Lexer, out *UserCredentials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel2(out *jwriter.Writer, in UserCredentials) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserCredentials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserCredentials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserCredentials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserCredentials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel2(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "image":
			out.Image = Image(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel3(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel4(in *jlexer.Lexer, out *TrailerWithTitle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "trailer":
			out.Trailer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel4(out *jwriter.Writer, in TrailerWithTitle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"trailer\":"
		out.RawString(prefix)
		out.String(string(in.Trailer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrailerWithTitle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrailerWithTitle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrailerWithTitle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrailerWithTitle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel4(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel5(in *jlexer.Lexer, out *SubscriptionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "person_id":
			out.PersonID = ID(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel5(out *jwriter.Writer, in SubscriptionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"person_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PersonID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel5(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel6(in *jlexer.Lexer, out *SubscriptionNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = ID(in.Int())
		case "person_id":
			if in.IsNull() {
				in.Skip()
				out.PersonsID = nil
			} else {
				in.Delim('[')
				if out.PersonsID == nil {
					if !in.IsDelim(']') {
						out.PersonsID = make([]ID, 0, 8)
					} else {
						out.PersonsID = []ID{}
					}
				} else {
					out.PersonsID = (out.PersonsID)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ID
					v1 = ID(in.Int())
					out.PersonsID = append(out.PersonsID, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subscription_events":
			if in.IsNull() {
				in.Skip()
				out.SubscriptionEvents = nil
			} else {
				in.Delim('[')
				if out.SubscriptionEvents == nil {
					if !in.IsDelim(']') {
						out.SubscriptionEvents = make([]SubscriptionEvent, 0, 1)
					} else {
						out.SubscriptionEvents = []SubscriptionEvent{}
					}
				} else {
					out.SubscriptionEvents = (out.SubscriptionEvents)[:0]
				}
				for !in.IsDelim(']') {
					var v2 SubscriptionEvent
					(v2).UnmarshalEasyJSON(in)
					out.SubscriptionEvents = append(out.SubscriptionEvents, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel6(out *jwriter.Writer, in SubscriptionNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"person_id\":"
		out.RawString(prefix)
		if in.PersonsID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.PersonsID {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"subscription_events\":"
		out.RawString(prefix)
		if in.SubscriptionEvents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.SubscriptionEvents {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel6(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel7(in *jlexer.Lexer, out *SubscriptionEventFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "persons":
			if in.IsNull() {
				in.Skip()
				out.Persons = nil
			} else {
				in.Delim('[')
				if out.Persons == nil {
					if !in.IsDelim(']') {
						out.Persons = make([]PersonTrunc, 0, 1)
					} else {
						out.Persons = []PersonTrunc{}
					}
				} else {
					out.Persons = (out.Persons)[:0]
				}
				for !in.IsDelim(']') {
					var v7 PersonTrunc
					(v7).UnmarshalEasyJSON(in)
					out.Persons = append(out.Persons, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			out.Description = string(in.String())
		case "date":
			out.Datetime = string(in.String())
		case "is_read":
			out.IsRead = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel7(out *jwriter.Writer, in SubscriptionEventFull) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"persons\":"
		out.RawString(prefix[1:])
		if in.Persons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Persons {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Datetime))
	}
	{
		const prefix string = ",\"is_read\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionEventFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionEventFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionEventFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionEventFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel7(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel8(in *jlexer.Lexer, out *SubscriptionEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "person_id":
			out.PersonID = ID(in.Int())
		case "film_id":
			out.FilmID = ID(in.Int())
		case "description":
			out.Description = string(in.String())
		case "date":
			out.Datetime = string(in.String())
		case "is_read":
			out.IsRead = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel8(out *jwriter.Writer, in SubscriptionEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"person_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PersonID))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmID))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Datetime))
	}
	{
		const prefix string = ",\"is_read\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel8(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel9(in *jlexer.Lexer, out *Subscription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = ID(in.Int())
		case "person_id":
			if in.IsNull() {
				in.Skip()
				out.PersonsID = nil
			} else {
				in.Delim('[')
				if out.PersonsID == nil {
					if !in.IsDelim(']') {
						out.PersonsID = make([]ID, 0, 8)
					} else {
						out.PersonsID = []ID{}
					}
				} else {
					out.PersonsID = (out.PersonsID)[:0]
				}
				for !in.IsDelim(']') {
					var v10 ID
					v10 = ID(in.Int())
					out.PersonsID = append(out.PersonsID, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subscription_events":
			if in.IsNull() {
				in.Skip()
				out.SubscriptionEvents = nil
			} else {
				in.Delim('[')
				if out.SubscriptionEvents == nil {
					if !in.IsDelim(']') {
						out.SubscriptionEvents = make([]SubscriptionEvent, 0, 1)
					} else {
						out.SubscriptionEvents = []SubscriptionEvent{}
					}
				} else {
					out.SubscriptionEvents = (out.SubscriptionEvents)[:0]
				}
				for !in.IsDelim(']') {
					var v11 SubscriptionEvent
					(v11).UnmarshalEasyJSON(in)
					out.SubscriptionEvents = append(out.SubscriptionEvents, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel9(out *jwriter.Writer, in Subscription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"person_id\":"
		out.RawString(prefix)
		if in.PersonsID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.PersonsID {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"subscription_events\":"
		out.RawString(prefix)
		if in.SubscriptionEvents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.SubscriptionEvents {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subscription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subscription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subscription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subscription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel9(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel10(in *jlexer.Lexer, out *ReviewNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "film_id":
			out.FilmID = ID(in.Int())
		case "author_id":
			out.AuthorID = ID(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel10(out *jwriter.Writer, in ReviewNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmID))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel10(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel11(in *jlexer.Lexer, out *ReviewFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "title":
			out.Title = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "film_id":
			out.FilmID = ID(in.Int())
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "stars":
			out.Mark = Mark(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel11(out *jwriter.Writer, in ReviewFull) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix)
		out.Float32(float32(in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReviewFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReviewFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReviewFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReviewFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel11(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel12(in *jlexer.Lexer, out *Review) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "title":
			out.Title = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "film_id":
			out.FilmID = ID(in.Int())
		case "film_title":
			out.FilmTitle = string(in.String())
		case "author_id":
			out.AuthorID = ID(in.Int())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "mark":
			out.Mark = Mark(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel12(out *jwriter.Writer, in Review) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmID))
	}
	{
		const prefix string = ",\"film_title\":"
		out.RawString(prefix)
		out.String(string(in.FilmTitle))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Float32(float32(in.Mark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Review) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Review) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Review) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Review) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel12(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel13(in *jlexer.Lexer, out *RatingUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = ID(in.Int())
		case "film_id":
			out.FilmID = ID(in.Int())
		case "stars":
			out.Stars = Stars(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel13(out *jwriter.Writer, in RatingUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmID))
	}
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix)
		out.Int(int(in.Stars))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatingUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatingUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatingUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatingUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel13(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel14(in *jlexer.Lexer, out *RatingNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "film_id":
			out.FilmID = ID(in.Int())
		case "stars":
			out.Stars = Stars(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel14(out *jwriter.Writer, in RatingNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.FilmID))
	}
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix)
		out.Int(int(in.Stars))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RatingNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RatingNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RatingNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RatingNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel14(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel15(in *jlexer.Lexer, out *Rating) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = ID(in.Int())
		case "film_id":
			out.FilmID = ID(in.Int())
		case "stars":
			out.Stars = Stars(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel15(out *jwriter.Writer, in Rating) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmID))
	}
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix)
		out.Int(int(in.Stars))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rating) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rating) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rating) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rating) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel15(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel16(in *jlexer.Lexer, out *PersonTrunc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = Image(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel16(out *jwriter.Writer, in PersonTrunc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonTrunc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonTrunc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonTrunc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonTrunc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel16(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel17(in *jlexer.Lexer, out *PersonNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]Role, 0, 4)
					} else {
						out.Roles = []Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Role
					v16 = Role(in.String())
					out.Roles = append(out.Roles, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "birthday":
			out.Birthday = string(in.String())
		case "birthplace":
			out.Birthplace = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel17(out *jwriter.Writer, in PersonNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Roles {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"birthplace\":"
		out.RawString(prefix)
		out.String(string(in.Birthplace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel17(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel18(in *jlexer.Lexer, out *PersonFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "mark":
			out.Mark = Mark(in.Float32())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]Role, 0, 4)
					} else {
						out.Roles = []Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Role
					v19 = Role(in.String())
					out.Roles = append(out.Roles, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "birthday":
			out.Birthday = string(in.String())
		case "birthplace":
			out.Birthplace = string(in.String())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 4)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v20 Genre
					v20 = Genre(in.String())
					out.Genres = append(out.Genres, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmTrunc, 0, 1)
					} else {
						out.Films = []FilmTrunc{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v21 FilmTrunc
					(v21).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]Image, 0, 4)
					} else {
						out.Images = []Image{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Image
					v22 = Image(in.String())
					out.Images = append(out.Images, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel18(out *jwriter.Writer, in PersonFull) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Float32(float32(in.Mark))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Roles {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"birthplace\":"
		out.RawString(prefix)
		out.String(string(in.Birthplace))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Genres {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Films {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Images {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PersonFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PersonFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PersonFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PersonFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel18(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel19(in *jlexer.Lexer, out *Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "name":
			out.Name = string(in.String())
		case "mark":
			out.Mark = Mark(in.Float32())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]Role, 0, 4)
					} else {
						out.Roles = []Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Role
					v31 = Role(in.String())
					out.Roles = append(out.Roles, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "birthday":
			out.Birthday = string(in.String())
		case "birthplace":
			out.Birthplace = string(in.String())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 4)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v32 Genre
					v32 = Genre(in.String())
					out.Genres = append(out.Genres, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "films_id":
			if in.IsNull() {
				in.Skip()
				out.FilmsID = nil
			} else {
				in.Delim('[')
				if out.FilmsID == nil {
					if !in.IsDelim(']') {
						out.FilmsID = make([]ID, 0, 8)
					} else {
						out.FilmsID = []ID{}
					}
				} else {
					out.FilmsID = (out.FilmsID)[:0]
				}
				for !in.IsDelim(']') {
					var v33 ID
					v33 = ID(in.Int())
					out.FilmsID = append(out.FilmsID, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]Image, 0, 4)
					} else {
						out.Images = []Image{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Image
					v34 = Image(in.String())
					out.Images = append(out.Images, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel19(out *jwriter.Writer, in Person) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Float32(float32(in.Mark))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Roles {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"birthplace\":"
		out.RawString(prefix)
		out.String(string(in.Birthplace))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Genres {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"films_id\":"
		out.RawString(prefix)
		if in.FilmsID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.FilmsID {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v40))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Images {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Person) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Person) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Person) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Person) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel19(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel20(in *jlexer.Lexer, out *ListUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "film_id":
			out.FilmID = ID(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel20(out *jwriter.Writer, in ListUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel20(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel21(in *jlexer.Lexer, out *ListNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "user_id":
			out.UserID = ID(in.Int())
		case "film_id":
			out.FilmID = ID(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel21(out *jwriter.Writer, in ListNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"film_id\":"
		out.RawString(prefix)
		out.Int(int(in.FilmID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel21(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel22(in *jlexer.Lexer, out *ListFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "title":
			out.Title = string(in.String())
		case "user_id":
			out.UserID = ID(in.Int())
		case "films":
			if in.IsNull() {
				in.Skip()
				out.Films = nil
			} else {
				in.Delim('[')
				if out.Films == nil {
					if !in.IsDelim(']') {
						out.Films = make([]FilmTrunc, 0, 1)
					} else {
						out.Films = []FilmTrunc{}
					}
				} else {
					out.Films = (out.Films)[:0]
				}
				for !in.IsDelim(']') {
					var v43 FilmTrunc
					(v43).UnmarshalEasyJSON(in)
					out.Films = append(out.Films, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel22(out *jwriter.Writer, in ListFull) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"films\":"
		out.RawString(prefix)
		if in.Films == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Films {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel22(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel23(in *jlexer.Lexer, out *List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "title":
			out.Title = string(in.String())
		case "user_id":
			out.UserID = ID(in.Int())
		case "films_id":
			if in.IsNull() {
				in.Skip()
				out.FilmsID = nil
			} else {
				in.Delim('[')
				if out.FilmsID == nil {
					if !in.IsDelim(']') {
						out.FilmsID = make([]ID, 0, 8)
					} else {
						out.FilmsID = []ID{}
					}
				} else {
					out.FilmsID = (out.FilmsID)[:0]
				}
				for !in.IsDelim(']') {
					var v46 ID
					v46 = ID(in.Int())
					out.FilmsID = append(out.FilmsID, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel23(out *jwriter.Writer, in List) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"films_id\":"
		out.RawString(prefix)
		if in.FilmsID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.FilmsID {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v48))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v List) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v List) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *List) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *List) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel23(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel24(in *jlexer.Lexer, out *FilmTrunc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "title":
			out.Title = string(in.String())
		case "year":
			out.Year = int(in.Int())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 4)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v49 Genre
					v49 = Genre(in.String())
					out.Genres = append(out.Genres, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mark":
			out.Mark = Mark(in.Float32())
		case "description":
			out.Description = string(in.String())
		case "persons":
			if in.IsNull() {
				in.Skip()
				out.Persons = nil
			} else {
				in.Delim('[')
				if out.Persons == nil {
					if !in.IsDelim(']') {
						out.Persons = make([]PersonTrunc, 0, 1)
					} else {
						out.Persons = []PersonTrunc{}
					}
				} else {
					out.Persons = (out.Persons)[:0]
				}
				for !in.IsDelim(']') {
					var v50 PersonTrunc
					(v50).UnmarshalEasyJSON(in)
					out.Persons = append(out.Persons, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "image":
			out.Image = Image(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel24(out *jwriter.Writer, in FilmTrunc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Genres {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Float32(float32(in.Mark))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"persons\":"
		out.RawString(prefix)
		if in.Persons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Persons {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmTrunc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmTrunc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmTrunc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmTrunc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel24(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel25(in *jlexer.Lexer, out *FilmNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "year":
			out.Year = int(in.Int())
		case "countries":
			if in.IsNull() {
				in.Skip()
				out.Countries = nil
			} else {
				in.Delim('[')
				if out.Countries == nil {
					if !in.IsDelim(']') {
						out.Countries = make([]string, 0, 4)
					} else {
						out.Countries = []string{}
					}
				} else {
					out.Countries = (out.Countries)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.Countries = append(out.Countries, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 4)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v56 Genre
					v56 = Genre(in.String())
					out.Genres = append(out.Genres, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "persons_id":
			if in.IsNull() {
				in.Skip()
				out.PersonsID = nil
			} else {
				in.Delim('[')
				if out.PersonsID == nil {
					if !in.IsDelim(']') {
						out.PersonsID = make([]ID, 0, 8)
					} else {
						out.PersonsID = []ID{}
					}
				} else {
					out.PersonsID = (out.PersonsID)[:0]
				}
				for !in.IsDelim(']') {
					var v57 ID
					v57 = ID(in.Int())
					out.PersonsID = append(out.PersonsID, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "trailer":
			out.Trailer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel25(out *jwriter.Writer, in FilmNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"countries\":"
		out.RawString(prefix)
		if in.Countries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.Countries {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Genres {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.String(string(v61))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"persons_id\":"
		out.RawString(prefix)
		if in.PersonsID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.PersonsID {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v63))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"trailer\":"
		out.RawString(prefix)
		out.String(string(in.Trailer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel25(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel26(in *jlexer.Lexer, out *FilmFull) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "title":
			out.Title = string(in.String())
		case "year":
			out.Year = int(in.Int())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 4)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v64 Genre
					v64 = Genre(in.String())
					out.Genres = append(out.Genres, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mark":
			out.Mark = Mark(in.Float32())
		case "description":
			out.Description = string(in.String())
		case "countries":
			if in.IsNull() {
				in.Skip()
				out.Countries = nil
			} else {
				in.Delim('[')
				if out.Countries == nil {
					if !in.IsDelim(']') {
						out.Countries = make([]string, 0, 4)
					} else {
						out.Countries = []string{}
					}
				} else {
					out.Countries = (out.Countries)[:0]
				}
				for !in.IsDelim(']') {
					var v65 string
					v65 = string(in.String())
					out.Countries = append(out.Countries, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "persons":
			if in.IsNull() {
				in.Skip()
				out.Persons = nil
			} else {
				in.Delim('[')
				if out.Persons == nil {
					if !in.IsDelim(']') {
						out.Persons = make([]PersonTrunc, 0, 1)
					} else {
						out.Persons = []PersonTrunc{}
					}
				} else {
					out.Persons = (out.Persons)[:0]
				}
				for !in.IsDelim(']') {
					var v66 PersonTrunc
					(v66).UnmarshalEasyJSON(in)
					out.Persons = append(out.Persons, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]Image, 0, 4)
					} else {
						out.Images = []Image{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v67 Image
					v67 = Image(in.String())
					out.Images = append(out.Images, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reviews_num":
			out.ReviewsNum = int(in.Int())
		case "trailer":
			out.Trailer = string(in.String())
		case "related":
			if in.IsNull() {
				in.Skip()
				out.Related = nil
			} else {
				in.Delim('[')
				if out.Related == nil {
					if !in.IsDelim(']') {
						out.Related = make([]FilmTrunc, 0, 1)
					} else {
						out.Related = []FilmTrunc{}
					}
				} else {
					out.Related = (out.Related)[:0]
				}
				for !in.IsDelim(']') {
					var v68 FilmTrunc
					(v68).UnmarshalEasyJSON(in)
					out.Related = append(out.Related, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel26(out *jwriter.Writer, in FilmFull) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v69, v70 := range in.Genres {
				if v69 > 0 {
					out.RawByte(',')
				}
				out.String(string(v70))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Float32(float32(in.Mark))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"countries\":"
		out.RawString(prefix)
		if in.Countries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.Countries {
				if v71 > 0 {
					out.RawByte(',')
				}
				out.String(string(v72))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"persons\":"
		out.RawString(prefix)
		if in.Persons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v73, v74 := range in.Persons {
				if v73 > 0 {
					out.RawByte(',')
				}
				(v74).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v75, v76 := range in.Images {
				if v75 > 0 {
					out.RawByte(',')
				}
				out.String(string(v76))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reviews_num\":"
		out.RawString(prefix)
		out.Int(int(in.ReviewsNum))
	}
	{
		const prefix string = ",\"trailer\":"
		out.RawString(prefix)
		out.String(string(in.Trailer))
	}
	if len(in.Related) != 0 {
		const prefix string = ",\"related\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v77, v78 := range in.Related {
				if v77 > 0 {
					out.RawByte(',')
				}
				(v78).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FilmFull) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FilmFull) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FilmFull) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FilmFull) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel26(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel27(in *jlexer.Lexer, out *Film) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = ID(in.Int())
		case "title":
			out.Title = string(in.String())
		case "year":
			out.Year = int(in.Int())
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]Genre, 0, 4)
					} else {
						out.Genres = []Genre{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v79 Genre
					v79 = Genre(in.String())
					out.Genres = append(out.Genres, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mark":
			out.Mark = Mark(in.Float32())
		case "description":
			out.Description = string(in.String())
		case "countries":
			if in.IsNull() {
				in.Skip()
				out.Countries = nil
			} else {
				in.Delim('[')
				if out.Countries == nil {
					if !in.IsDelim(']') {
						out.Countries = make([]string, 0, 4)
					} else {
						out.Countries = []string{}
					}
				} else {
					out.Countries = (out.Countries)[:0]
				}
				for !in.IsDelim(']') {
					var v80 string
					v80 = string(in.String())
					out.Countries = append(out.Countries, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "persons_id":
			if in.IsNull() {
				in.Skip()
				out.PersonsID = nil
			} else {
				in.Delim('[')
				if out.PersonsID == nil {
					if !in.IsDelim(']') {
						out.PersonsID = make([]ID, 0, 8)
					} else {
						out.PersonsID = []ID{}
					}
				} else {
					out.PersonsID = (out.PersonsID)[:0]
				}
				for !in.IsDelim(']') {
					var v81 ID
					v81 = ID(in.Int())
					out.PersonsID = append(out.PersonsID, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]Image, 0, 4)
					} else {
						out.Images = []Image{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v82 Image
					v82 = Image(in.String())
					out.Images = append(out.Images, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reviews_num":
			out.ReviewsNum = int(in.Int())
		case "trailer":
			out.Trailer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel27(out *jwriter.Writer, in Film) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"year\":"
		out.RawString(prefix)
		out.Int(int(in.Year))
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.Genres {
				if v83 > 0 {
					out.RawByte(',')
				}
				out.String(string(v84))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Float32(float32(in.Mark))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"countries\":"
		out.RawString(prefix)
		if in.Countries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v85, v86 := range in.Countries {
				if v85 > 0 {
					out.RawByte(',')
				}
				out.String(string(v86))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"persons_id\":"
		out.RawString(prefix)
		if in.PersonsID == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.PersonsID {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v88))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Images {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reviews_num\":"
		out.RawString(prefix)
		out.Int(int(in.ReviewsNum))
	}
	{
		const prefix string = ",\"trailer\":"
		out.RawString(prefix)
		out.String(string(in.Trailer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Film) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Film) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Film) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Film) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel27(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel28(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel28(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel28(l, v)
}
func easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel29(in *jlexer.Lexer, out *Cookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user-id":
			out.UserID = ID(in.Int())
		case "Cookie":
			if in.IsNull() {
				in.Skip()
				out.Cookie = nil
			} else {
				if out.Cookie == nil {
					out.Cookie = new(http.Cookie)
				}
				easyjsonC80ae7adDecodeNetHttp(in, out.Cookie)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel29(out *jwriter.Writer, in Cookie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user-id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"Cookie\":"
		out.RawString(prefix)
		if in.Cookie == nil {
			out.RawString("null")
		} else {
			easyjsonC80ae7adEncodeNetHttp(out, *in.Cookie)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cookie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cookie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComGoParkMailRu20192PirogiAppDomainModel29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cookie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cookie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComGoParkMailRu20192PirogiAppDomainModel29(l, v)
}
func easyjsonC80ae7adDecodeNetHttp(in *jlexer.Lexer, out *http.Cookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Value":
			out.Value = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "Domain":
			out.Domain = string(in.String())
		case "Expires":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Expires).UnmarshalJSON(data))
			}
		case "RawExpires":
			out.RawExpires = string(in.String())
		case "MaxAge":
			out.MaxAge = int(in.Int())
		case "Secure":
			out.Secure = bool(in.Bool())
		case "HttpOnly":
			out.HttpOnly = bool(in.Bool())
		case "SameSite":
			out.SameSite = http.SameSite(in.Int())
		case "Raw":
			out.Raw = string(in.String())
		case "Unparsed":
			if in.IsNull() {
				in.Skip()
				out.Unparsed = nil
			} else {
				in.Delim('[')
				if out.Unparsed == nil {
					if !in.IsDelim(']') {
						out.Unparsed = make([]string, 0, 4)
					} else {
						out.Unparsed = []string{}
					}
				} else {
					out.Unparsed = (out.Unparsed)[:0]
				}
				for !in.IsDelim(']') {
					var v91 string
					v91 = string(in.String())
					out.Unparsed = append(out.Unparsed, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeNetHttp(out *jwriter.Writer, in http.Cookie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"Domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"Expires\":"
		out.RawString(prefix)
		out.Raw((in.Expires).MarshalJSON())
	}
	{
		const prefix string = ",\"RawExpires\":"
		out.RawString(prefix)
		out.String(string(in.RawExpires))
	}
	{
		const prefix string = ",\"MaxAge\":"
		out.RawString(prefix)
		out.Int(int(in.MaxAge))
	}
	{
		const prefix string = ",\"Secure\":"
		out.RawString(prefix)
		out.Bool(bool(in.Secure))
	}
	{
		const prefix string = ",\"HttpOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.HttpOnly))
	}
	{
		const prefix string = ",\"SameSite\":"
		out.RawString(prefix)
		out.Int(int(in.SameSite))
	}
	{
		const prefix string = ",\"Raw\":"
		out.RawString(prefix)
		out.String(string(in.Raw))
	}
	{
		const prefix string = ",\"Unparsed\":"
		out.RawString(prefix)
		if in.Unparsed == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.Unparsed {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.String(string(v93))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
